# Makefile pour hash-breaker

.PHONY: help check quick-check test build clean format clippy doc install-tools

# Afficher l'aide
help:
	@echo "üîß Commandes disponibles pour hash-breaker:"
	@echo ""
	@echo "üìã V√©rifications:"
	@echo "  make check        - V√©rification compl√®te (formatage, clippy, tests, etc.)"
	@echo "  make quick-check  - V√©rification rapide (essentiels seulement)"
	@echo "  make test         - Ex√©cuter tous les tests"
	@echo "  make format       - Formater le code"
	@echo "  make clippy       - V√©rifier avec clippy"
	@echo ""
	@echo "üî® Build:"
	@echo "  make build        - Compiler en mode release"
	@echo "  make clean        - Nettoyer les fichiers de build"
	@echo ""
	@echo "üìö Documentation:"
	@echo "  make doc          - G√©n√©rer la documentation"
	@echo ""
	@echo "üõ†Ô∏è  Outils:"
	@echo "  make install-tools - Installer les outils de d√©veloppement"

# V√©rification compl√®te
check:
	@./scripts/check.sh

# V√©rification rapide
quick-check:
	@./scripts/quick-check.sh

# Tests
test:
	cargo test --verbose

# Build release
build:
	cargo build --release

# Nettoyer
clean:
	cargo clean

# Formater le code
format:
	cargo fmt --all

# V√©rifier avec clippy
clippy:
	cargo clippy --all-targets --all-features -- -D warnings

# Documentation
doc:
	cargo doc --no-deps --open

# Installer les outils de d√©veloppement
install-tools:
	cargo install cargo-audit
	cargo install cargo-outdated
	@echo "‚úÖ Outils install√©s: cargo-audit, cargo-outdated"

# Pr√©-commit hook (pour Git)
pre-commit: 
	@./scripts/pre-commit.sh

# V√©rification avant push
pre-push: check
	@echo "‚úÖ Pr√©-push checks passed!" 